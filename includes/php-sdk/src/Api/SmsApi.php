<?php
/**
 * SmsApi
 * PHP version 5
 *
 * @category Class
 * @package  NotifyLk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Notify.lk API
 *
 * Send SMS with Notify.lk
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NotifyLk\Api;

use \NotifyLk\ApiClient;
use \NotifyLk\ApiException;
use \NotifyLk\Configuration;
use \NotifyLk\ObjectSerializer;

/**
 * SmsApi Class Doc Comment
 *
 * @category Class
 * @package  NotifyLk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmsApi
{
    /**
     * API Client
     *
     * @var \NotifyLk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \NotifyLk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\NotifyLk\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.notify.lk/api/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \NotifyLk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \NotifyLk\ApiClient $apiClient set the API client
     *
     * @return SmsApi
     */
    public function setApiClient(\NotifyLk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation sendSMS
     *
     * Sending SMS to a number from specified sender ID
     *
     * @param string $userId API User ID - Can be found in your settings page. (required)
     * @param string $apiKey API Secret - Can be found in your settings page. (required)
     * @param string $message Text of the message. 320 chars max. (required)
     * @param string $to Number to send the SMS. Better to use 9471XXXXXXX format. (required)
     * @param string $senderId This is the from name recipient will see as the sender of the SMS. Use \&quot;NotifyDemo\&quot; if you have not ordered your own sender ID yet. (required)
     * @param string $contact_fname Contact First Name - This will be used while saving the phone number in your Notify contacts. (optional)
     * @param string $contact_lname Contact Last Name - This will be used while saving the phone number in your Notify contacts. (optional)
     * @param string $contact_email Contact Email Address - This will be used while saving the phone number in your Notify contacts. (optional)
     * @param string $contact_address Contact Physical Address - This will be used while saving the phone number in your Notify contacts. (optional)
     * @throws \NotifyLk\ApiException on non-2xx response
     * @return void
     */
    public function sendSMS($userId, $apiKey, $message, $to, $senderId, $contact_fname = null, $contact_lname = null, $contact_email = null, $contact_address = null)
    {
        list($response) = $this->sendSMSWithHttpInfo($userId, $apiKey, $message, $to, $senderId, $contact_fname, $contact_lname, $contact_email, $contact_address);
        return $response;
    }

    /**
     * Operation sendSMSWithHttpInfo
     *
     * Sending SMS to a number from specified sender ID
     *
     * @param string $userId API User ID - Can be found in your settings page. (required)
     * @param string $apiKey API Secret - Can be found in your settings page. (required)
     * @param string $message Text of the message. 320 chars max. (required)
     * @param string $to Number to send the SMS. Better to use 9471XXXXXXX format. (required)
     * @param string $senderId This is the from name recipient will see as the sender of the SMS. Use \&quot;NotifyDemo\&quot; if you have not ordered your own sender ID yet. (required)
     * @param string $contact_fname Contact First Name - This will be used while saving the phone number in your Notify contacts. (optional)
     * @param string $contact_lname Contact Last Name - This will be used while saving the phone number in your Notify contacts. (optional)
     * @param string $contact_email Contact Email Address - This will be used while saving the phone number in your Notify contacts. (optional)
     * @param string $contact_address Contact Physical Address - This will be used while saving the phone number in your Notify contacts. (optional)
     * @throws \NotifyLk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSMSWithHttpInfo($userId, $apiKey, $message, $to, $senderId, $contact_fname = null, $contact_lname = null, $contact_email = null, $contact_address = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userId when calling sendSMS');
        }
        // verify the required parameter 'apiKey' is set
        if ($apiKey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apiKey when calling sendSMS');
        }
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling sendSMS');
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $to when calling sendSMS');
        }
        // verify the required parameter 'senderId' is set
        if ($senderId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $senderId when calling sendSMS');
        }
        // parse inputs
        $resourcePath = "/send";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/application/x-www-form-urlencoded']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userId !== null) {
            $formParams['user_id'] = $this->apiClient->getSerializer()->toFormValue($userId);
        }
        // form params
        if ($apiKey !== null) {
            $formParams['api_key'] = $this->apiClient->getSerializer()->toFormValue($apiKey);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
        }
        // form params
        if ($to !== null) {
            $formParams['to'] = $this->apiClient->getSerializer()->toFormValue($to);
        }
        // form params
        if ($senderId !== null) {
            $formParams['sender_id'] = $this->apiClient->getSerializer()->toFormValue($senderId);
        }
        // form params
        if ($contact_fname !== null) {
            $formParams['contact_fname'] = $this->apiClient->getSerializer()->toFormValue($contact_fname);
        }
        // form params
        if ($contact_lname !== null) {
            $formParams['contact_lname'] = $this->apiClient->getSerializer()->toFormValue($contact_lname);
        }
        // form params
        if ($contact_email !== null) {
            $formParams['contact_email'] = $this->apiClient->getSerializer()->toFormValue($contact_email);
        }
        // form params
        if ($contact_address !== null) {
            $formParams['contact_address'] = $this->apiClient->getSerializer()->toFormValue($contact_address);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/send'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
